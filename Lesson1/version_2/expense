#! /usr/bin/env ruby

require 'pg'

CONNECTION = PG.connect(dbname:"expenses")

def list_expenses
  result = CONNECTION.exec("SELECT * FROM expenses ORDER BY created_on ASC")
  result.each do |tuple|
    columns = [ tuple["id"].rjust(3),
                tuple["created_on"].rjust(10),
                tuple["amount"].rjust(12),
                tuple["memo"] ]

    puts columns.join("|")
  end
end

def add_expense(amount, memo)
  date = Date.today
  sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
  CONNECTION.exec_params(sql, [amount, memo, date])
end

def display_help
  puts """
    An expense recording system

    Commands:

    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
  """
end

command = ARGV.first
if command == "list"
  list_expenses
elsif command == "add"
  amount = ARGV[1]
  memo = ARGV[2]
  abort "You must provide an amount and memo." unless amount && memo
  add_expense(amount, memo)
else
  display_help
end




# def list_expenses
#   connection = PG.connect(dbname:"expenses")

#   result = connection.exec("SELECT * FROM expenses ORDER BY created_on ASC")
#   result.each do |tuple|
#     columns = [ tuple["id"].rjust(3),
#             tuple["created_on"].rjust(10),
#             tuple["amount"].rjust(12),
#             tuple["memo"] ]

#     puts columns.join("|")
#   end
# end

# def display_help
#   puts """
#     This is an expense recording system

#     Commands:

#     add AMOUNT MEMO [DATE] - record a new expense
#     clear - delete all expenses
#     list - list all expenses
#     delete NUMBER - remove expense with id NUMBER
#     search QUERY - list expenses with matching memo field
#   """
# end

# def add_expense(amount=false, memo=false, add=false)
#   #return puts "You must provide an amount and memo." if amount == false && memo == false
#   puts "#{amount} #{memo} #{add == false ? 'default' : add}"
# end

# command = ARGV.first

# command == "list" ? list_expenses : command == "add" ? add : display_help







# connection = PG.connect(dbname: "expenses")

# result = connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")

# result.each { |tuple|
#   columns = [ tuple["id"].rjust(3),
#             tuple["created_on"].rjust(10),
#             tuple["amount"].rjust(12),
#             tuple["memo"]] 
#   puts columns.join("|") 
# }